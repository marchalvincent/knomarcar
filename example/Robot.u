	
/* ====== Sensor.u ====== */
var Global.FrDsRight = DistanceSensor.new("ds0");
var Global.FrDsLeft = DistanceSensor.new("ps7");
var Global.BhDsRight = DistanceSensor.new("ps3");
var Global.BhDsLeft = DistanceSensor.new("ps4");
var Global.LsRight = LightSensor.new("ls1");
var Global.LsLeft = LightSensor.new("ls6");

/* ====== Actuator.u ====== */
class actuators {

	var wheelLeft;
	var wheelRight;
	var group;

	function init() {
		wheelLeft = DifferentialWheels.new("e-puck", true);
		wheelRight = DifferentialWheels.new("e-puck", false);
		group = Group.new(wheelLeft, wheelRight);
	};

	function Forward(s) { group.speed = s; }

	function TurnLeft(s) { wheelLeft.speed = -s & wheelRight.speed = s; }

	function TurnRight(s) { wheelLeft.speed = s & wheelRight.speed = -s; }

	function Stopping(s) { group.speed = 0; }

	function Backward(s) { group.speed = -s; }

};


/* ==============Behavior escape============== */
var minDistance = 0.2;
var maxDistance = 0.5;
var beta = 0.02;

/*  Creating the stateMachineEscape state */
removeSlot("stateMachineEscape");
var stateMachineEscape = fsm.State.new("stateMachineEscape");
stateMachineEscape.params_dict = Dictionary.new();

var stateMachineEscape.init = fsm.State.create("stateMachineEscape.init", stateMachineEscape, 
function() {}, true, 0, function() {}, function() {}, false);

var stateMachineEscape.goRight = fsm.State.create("stateMachineEscape.goRight", stateMachineEscape, 
function() {actuator.TurnRight(50)}, false, 1, function() {}, function() {}, false);

var stateMachineEscape.backward = fsm.State.create("stateMachineEscape.backward", stateMachineEscape, 
function() {actuator.Backward(0)}, false, 2, function() {}, function() {}, false);

var stateMachineEscape.goLeft = fsm.State.create("stateMachineEscape.goLeft", stateMachineEscape, 
function() {actuator.TurnLeft(50)}, false, 3, function() {}, function() {}, false);

var stateMachineEscape.goStraight = fsm.State.create("stateMachineEscape.goStraight", stateMachineEscape, 
function() {actuator.Forward(50)}, false, 4, function() {}, function() {}, false);


fsm.Transition.create(stateMachineEscape, stateMachineEscape.init, goLeft, (( ( FrDsLeftVal ) >= ( minDistance ) ) && ( ( ( FrDsRightVal ) < ( minDistance ) ) && ( ( ( FrDsLeftVal ) - ( FrDsRightVal ) ) > ( beta ) ) )), initToLeft);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.init, goStraight, (( ( ( BhDsLeft ) < ( minDistance ) ) && ( ( BhDsRight ) < ( minDistance ) ) ) || ( ( ( FrDsLeftVal ) > ( minDistance ) ) && ( ( ( -FrDsRightVal ) ) > ( minDistance ) ) )), initToStraight);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.init, goRight, (( ( FrDsRightVal ) >= ( minDistance ) ) && ( ( ( FrDsLeftVal ) < ( minDistance ) ) && ( ( ( FrDsRightVal ) - ( FrDsLeftVal ) ) > ( beta ) ) )), initToRight);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.init, backward, (( ( FrDsLeftVal ) < ( minDistance ) ) && ( ( FrDsRightVal ) < ( minDistance ) )), initToBackward);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goRight, goLeft, (( ( FrDsLeftVal ) >= ( minDistance ) ) && ( ( ( FrDsRightVal ) < ( minDistance ) ) && ( ( ( FrDsLeftVal ) - ( FrDsRightVal ) ) > ( beta ) ) )), rightToLeft);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goRight, goStraight, (( ( FrDsLeftVal ) > ( minDistance ) ) && ( ( FrDsRightVal ) > ( minDistance ) )), rightToStraight);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goRight, backward, (( ( FrDsLeftVal ) < ( minDistance ) ) && ( ( FrDsRightVal ) < ( minDistance ) )), rightToBackward);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goRight, init, (( ( FrDsLeftVal ) >= ( maxDistance ) ) && ( ( FrDsRightVal ) >= ( maxDistance ) )), rightToInit);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.backward, goLeft, (( ( FrDsLeftVal ) >= ( minDistance ) ) && ( ( ( FrDsRightVal ) < ( minDistance ) ) && ( ( ( FrDsLeftVal ) - ( FrDsRightVal ) ) > ( beta ) ) )), backwardToLeft);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.backward, goStraight, (( ( FrDsLeftVal ) > ( minDistance ) ) && ( ( FrDsRightVal ) > ( minDistance ) )), backwardToStraight);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.backward, goRight, (( ( FrDsRightVal ) >= ( minDistance ) ) && ( ( ( FrDsLeftVal ) < ( minDistance ) ) && ( ( ( FrDsRightVal ) - ( FrDsLeftVal ) ) > ( beta ) ) )), backwardToRight);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.backward, init, (( ( FrDsLeftVal ) >= ( maxDistance ) ) && ( ( FrDsRightVal ) >= ( maxDistance ) )), backwardToInit);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goLeft, goStraight, (( ( FrDsLeftVal ) > ( minDistance ) ) && ( ( FrDsRightVal ) > ( minDistance ) )), leftToStraight);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goLeft, goRight, (( ( FrDsRightVal ) >= ( minDistance ) ) && ( ( ( FrDsLeftVal ) < ( minDistance ) ) && ( ( ( FrDsRightVal ) - ( FrDsLeftVal ) ) > ( beta ) ) )), leftToRight);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goLeft, backward, (( ( FrDsLeftVal ) < ( minDistance ) ) && ( ( FrDsRightVal ) < ( minDistance ) )), leftToBackward);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goLeft, init, (( ( FrDsLeftVal ) >= ( maxDistance ) ) && ( ( FrDsRightVal ) >= ( maxDistance ) )), leftToInit);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goStraight, goLeft, (( ( FrDsLeftVal ) >= ( minDistance ) ) && ( ( ( FrDsRightVal ) < ( minDistance ) ) && ( ( ( FrDsLeftVal ) - ( FrDsRightVal ) ) > ( beta ) ) )), straightToLeft);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goStraight, goRight, (( ( FrDsRightVal ) >= ( minDistance ) ) && ( ( ( FrDsLeftVal ) < ( minDistance ) ) && ( ( ( FrDsRightVal ) - ( FrDsLeftVal ) ) > ( beta ) ) )), straightToRight);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goStraight, backward, (( ( FrDsLeftVal ) < ( minDistance ) ) && ( ( FrDsRightVal ) < ( minDistance ) )), straightToBackward);
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goStraight, init, (( ( FrDsLeftVal ) >= ( maxDistance ) ) && ( ( FrDsRightVal ) >= ( maxDistance ) )), straightToInit);

/* ==============Behavior home============== */

/*  Creating the stateMachineHome state */
removeSlot("stateMachineHome");
var stateMachineHome = fsm.State.new("stateMachineHome");
stateMachineHome.params_dict = Dictionary.new();

var stateMachineHome.init = fsm.State.create("stateMachineHome.init", stateMachineHome, 
function() {}, true, 0, function() {}, function() {}, false);

var stateMachineHome.goLeft = fsm.State.create("stateMachineHome.goLeft", stateMachineHome, 
function() {actuator.TurnLeft(50)}, false, 1, function() {}, function() {}, false);

var stateMachineHome.goRight = fsm.State.create("stateMachineHome.goRight", stateMachineHome, 
function() {actuator.TurnRight(50)}, false, 2, function() {}, function() {}, false);

var stateMachineHome.end = fsm.State.create("stateMachineHome.end", stateMachineHome, 
function() {actuator.Stopping(0)}, false, 3, function() {}, function() {}, false);

var stateMachineHome.goStraight = fsm.State.create("stateMachineHome.goStraight", stateMachineHome, 
function() {actuator.Forward(50)}, false, 4, function() {}, function() {}, false);

var stateMachineHome.backward = fsm.State.create("stateMachineHome.backward", stateMachineHome, 
function() {actuator.Backward(0)}, false, 5, function() {}, function() {}, false);



