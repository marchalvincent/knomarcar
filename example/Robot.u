	
/* ====== Sensor.u ====== */
var Global.FrDsRight = DistanceSensor.new("ds0");
var Global.FrDsLeft = DistanceSensor.new("ps7");
var Global.BhDsRight = DistanceSensor.new("ps3");
var Global.BhDsLeft = DistanceSensor.new("ps4");
var Global.LsRight = LightSensor.new("ls1");
var Global.LsLeft = LightSensor.new("ls6");

/* ====== Actuator.u ====== */
class actuators {

	var wheelLeft;
	var wheelRight;
	var group;

	function init() {
		wheelLeft = DifferentialWheels.new("e-puck", true);
		wheelRight = DifferentialWheels.new("e-puck", false);
		group = Group.new(wheelLeft, wheelRight);
	};

	function Forward(s) { group.speed = s; }

	function TurnLeft(s) { wheelLeft.speed = -s & wheelRight.speed = s; }

	function TurnRight(s) { wheelLeft.speed = s & wheelRight.speed = -s; }

	function Stopping(s) { group.speed = 0; }

	function Backward(s) { group.speed = -s; }

};


/* ==============Behavior escape============== */
var minDistance = 0.2;
var maxDistance = 0.5;
var beta = 0.05;
var priorityESC = 1;

/*  Creating the stateMachineEscape state */
removeSlot("stateMachineEscape");
var stateMachineEscape = fsm.State.new("stateMachineEscape");
stateMachineEscape.params_dict = Dictionary.new();

var stateMachineEscape.initESC = fsm.State.create("stateMachineEscape.initESC", stateMachineEscape, 
function() {}, true, 0, function() {}, function() {}, false);

var stateMachineEscape.goRightESC = fsm.State.create("stateMachineEscape.goRightESC", stateMachineEscape, 
function() {actuator.TurnRight(500)}, false, 1, function() {}, function() {}, false);

var stateMachineEscape.backwardESC = fsm.State.create("stateMachineEscape.backwardESC", stateMachineEscape, 
function() {actuator.Backward(0)}, false, 2, function() {}, function() {}, false);

var stateMachineEscape.goLeftESC = fsm.State.create("stateMachineEscape.goLeftESC", stateMachineEscape, 
function() {actuator.TurnLeft(500)}, false, 3, function() {}, function() {}, false);

var stateMachineEscape.goStraightESC = fsm.State.create("stateMachineEscape.goStraightESC", stateMachineEscape, 
function() {actuator.Forward(1000)}, false, 4, function() {}, function() {}, false);


fsm.Transition.create(stateMachineEscape, stateMachineEscape.initESC, stateMachineEscape.goLeftESC, "(( ( FrDsLeftVal.val ) >= ( minDistance ) ) && ( ( ( FrDsRightVal.val ) < ( minDistance ) ) && ( ( ( FrDsLeftVal.val ) - ( FrDsRightVal.val ) ) > ( beta ) ) ))", "stateMachineEscape.initToLeft");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.initESC, stateMachineEscape.goStraightESC, "(( ( ( BhDsLeft.val ) < ( minDistance ) ) && ( ( BhDsRight.val ) < ( minDistance ) ) ) || ( ( ( FrDsLeftVal.val ) > ( minDistance ) ) && ( ( FrDsRightVal.val ) > ( minDistance ) ) ))", "stateMachineEscape.initToStraight");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.initESC, stateMachineEscape.goRightESC, "(( ( FrDsRightVal.val ) >= ( minDistance ) ) && ( ( ( FrDsLeftVal.val ) < ( minDistance ) ) && ( ( ( FrDsRightVal.val ) - ( FrDsLeftVal.val ) ) > ( beta ) ) ))", "stateMachineEscape.initToRight");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.initESC, stateMachineEscape.backwardESC, "(( ( FrDsLeftVal.val ) < ( minDistance ) ) && ( ( FrDsRightVal.val ) < ( minDistance ) ))", "stateMachineEscape.initToBackward");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goRightESC, stateMachineEscape.goLeftESC, "(( ( FrDsLeftVal.val ) >= ( minDistance ) ) && ( ( ( FrDsRightVal.val ) < ( minDistance ) ) && ( ( ( FrDsLeftVal.val ) - ( FrDsRightVal.val ) ) > ( beta ) ) ))", "stateMachineEscape.rightToLeft");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goRightESC, stateMachineEscape.goStraightESC, "(( ( FrDsLeftVal.val ) > ( minDistance ) ) && ( ( FrDsRightVal.val ) > ( minDistance ) ))", "stateMachineEscape.rightToStraight");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goRightESC, stateMachineEscape.backwardESC, "(( ( FrDsLeftVal.val ) < ( minDistance ) ) && ( ( FrDsRightVal.val ) < ( minDistance ) ))", "stateMachineEscape.rightToBackward");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goRightESC, stateMachineEscape.initESC, "(( ( FrDsLeftVal.val ) >= ( maxDistance ) ) && ( ( FrDsRightVal.val ) >= ( maxDistance ) ))", "stateMachineEscape.rightToInit");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.backwardESC, stateMachineEscape.goLeftESC, "(( ( FrDsLeftVal.val ) >= ( minDistance ) ) && ( ( ( FrDsRightVal.val ) < ( minDistance ) ) && ( ( ( FrDsLeftVal.val ) - ( FrDsRightVal.val ) ) > ( beta ) ) ))", "stateMachineEscape.backwardToLeft");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.backwardESC, stateMachineEscape.goStraightESC, "(( ( FrDsLeftVal.val ) > ( minDistance ) ) && ( ( FrDsRightVal.val ) > ( minDistance ) ))", "stateMachineEscape.backwardToStraight");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.backwardESC, stateMachineEscape.goRightESC, "(( ( FrDsRightVal.val ) >= ( minDistance ) ) && ( ( ( FrDsLeftVal.val ) < ( minDistance ) ) && ( ( ( FrDsRightVal.val ) - ( FrDsLeftVal.val ) ) > ( beta ) ) ))", "stateMachineEscape.backwardToRight");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.backwardESC, stateMachineEscape.initESC, "(( ( FrDsLeftVal.val ) >= ( maxDistance ) ) && ( ( FrDsRightVal.val ) >= ( maxDistance ) ))", "stateMachineEscape.backwardToInit");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goLeftESC, stateMachineEscape.goStraightESC, "(( ( FrDsLeftVal.val ) > ( minDistance ) ) && ( ( FrDsRightVal.val ) > ( minDistance ) ))", "stateMachineEscape.leftToStraight");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goLeftESC, stateMachineEscape.goRightESC, "(( ( FrDsRightVal.val ) >= ( minDistance ) ) && ( ( ( FrDsLeftVal.val ) < ( minDistance ) ) && ( ( ( FrDsRightVal.val ) - ( FrDsLeftVal.val ) ) > ( beta ) ) ))", "stateMachineEscape.leftToRight");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goLeftESC, stateMachineEscape.backwardESC, "(( ( FrDsLeftVal.val ) < ( minDistance ) ) && ( ( FrDsRightVal.val ) < ( minDistance ) ))", "stateMachineEscape.leftToBackward");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goLeftESC, stateMachineEscape.initESC, "(( ( FrDsLeftVal.val ) >= ( maxDistance ) ) && ( ( FrDsRightVal.val ) >= ( maxDistance ) ))", "stateMachineEscape.leftToInit");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goStraightESC, stateMachineEscape.goLeftESC, "(( ( FrDsLeftVal.val ) >= ( minDistance ) ) && ( ( ( FrDsRightVal.val ) < ( minDistance ) ) && ( ( ( FrDsLeftVal.val ) - ( FrDsRightVal.val ) ) > ( beta ) ) ))", "stateMachineEscape.straightToLeft");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goStraightESC, stateMachineEscape.goRightESC, "(( ( FrDsRightVal.val ) >= ( minDistance ) ) && ( ( ( FrDsLeftVal.val ) < ( minDistance ) ) && ( ( ( FrDsRightVal.val ) - ( FrDsLeftVal.val ) ) > ( beta ) ) ))", "stateMachineEscape.straightToRight");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goStraightESC, stateMachineEscape.backwardESC, "(( ( FrDsLeftVal.val ) < ( minDistance ) ) && ( ( FrDsRightVal.val ) < ( minDistance ) ))", "stateMachineEscape.straightToBackward");
fsm.Transition.create(stateMachineEscape, stateMachineEscape.goStraightESC, stateMachineEscape.initESC, "(( ( FrDsLeftVal.val ) >= ( maxDistance ) ) && ( ( FrDsRightVal.val ) >= ( maxDistance ) ))", "stateMachineEscape.straightToInit");

var stateMachineEscape.enterChan = Channel.new("enteringNode");
var stateMachineEscape.enterChan.lobby = getSlot("lobby");
at(stateMachineEscape.enteringNode?(var id)) stateMachineEscape.enterChan << id.name;
var stateMachineEscape.leaveChan = Channel.new("leavingNode");
var stateMachineEscape.leaveChan.lobby = getSlot("lobby");
at(stateMachineEscape.leavingNode?(var id)) stateMachineEscape.leaveChan << id.name;
var stateMachineEscape.transitingChan = Channel.new("transiting");
var stateMachineEscape.transitingChan.lobby = getSlot("lobby");
at(stateMachineEscape.transit?(var node, var trans)) stateMachineEscape.transitingChan << trans.name;
var stateMachineEscape.freezeChan = Channel.new("freezed");
var stateMachineEscape.freezeChan.lobby = getSlot("lobby");
at(stateMachineEscape.fsmFreezed?()) stateMachineEscape.freezeChan << 1;

/* ==============Behavior home============== */
var alpha = 100;
var zero = 0;
var valueMax = 3500;
var priorityHome = 2;

/*  Creating the stateMachineHome state */
removeSlot("stateMachineHome");
var stateMachineHome = fsm.State.new("stateMachineHome");
stateMachineHome.params_dict = Dictionary.new();

var stateMachineHome.init = fsm.State.create("stateMachineHome.init", stateMachineHome, 
function() {actuator.Forward(1000)}, true, 0, function() {}, function() {}, false);

var stateMachineHome.goRight = fsm.State.create("stateMachineHome.goRight", stateMachineHome, 
function() {actuator.TurnRight(500)}, false, 1, function() {}, function() {}, false);

var stateMachineHome.goLeft = fsm.State.create("stateMachineHome.goLeft", stateMachineHome, 
function() {actuator.TurnLeft(500)}, false, 2, function() {}, function() {}, false);

var stateMachineHome.goStraight = fsm.State.create("stateMachineHome.goStraight", stateMachineHome, 
function() {actuator.Forward(1000)}, false, 3, function() {}, function() {}, false);

var stateMachineHome.backward = fsm.State.create("stateMachineHome.backward", stateMachineHome, 
function() {actuator.Backward(0)}, false, 5, function() {}, function() {}, false);

var stateMachineHome.end = fsm.State.create("stateMachineHome.end", stateMachineHome, 
function() {}, false, 6, function() {}, function() {}, false);


fsm.Transition.create(stateMachineHome, stateMachineHome.init, stateMachineHome.goLeft, "(( ( LsLeftVal.val ) < ( LsRightVal.val ) ) && ( ( ( LsRightVal.val ) - ( LsLeftVal.val ) ) > ( alpha ) ))", "stateMachineHome.initToLeft");
fsm.Transition.create(stateMachineHome, stateMachineHome.init, stateMachineHome.goStraight, "(( ( ( ( LsRightVal.val ) < ( valueMax ) ) && ( ( LsLeftVal.val ) < ( valueMax ) ) ) && ( ( ( LsLeftVal.val ) != ( zero ) ) && ( ( LsRightVal.val ) != ( zero ) ) ) ) && ( ( ( ( LsLeftVal.val ) - ( LsRightVal.val ) ) < ( valueMax ) ) || ( ( ( LsRightVal.val ) - ( LsLeftVal.val ) ) < ( alpha ) ) ))", "stateMachineHome.initToStraight");
fsm.Transition.create(stateMachineHome, stateMachineHome.init, stateMachineHome.goRight, "(( ( LsRightVal.val ) < ( LsLeftVal.val ) ) && ( ( ( LsLeftVal.val ) - ( LsRightVal.val ) ) > ( alpha ) ))", "stateMachineHome.initToRight");
fsm.Transition.create(stateMachineHome, stateMachineHome.init, stateMachineHome.end, "(( ( LsRightVal.val ) == ( zero ) ) && ( ( LsLeftVal.val ) == ( zero ) ))", "stateMachineHome.initToEnd");
fsm.Transition.create(stateMachineHome, stateMachineHome.init, stateMachineHome.backward, "(( ( ( LsLeftVal.val ) >= ( valueMax ) ) && ( ( LsRightVal.val ) >= ( valueMax ) ) ) && ( ( ( ( LsLeftVal.val ) - ( LsRightVal.val ) ) <= ( alpha ) ) || ( ( ( LsRightVal.val ) - ( LsLeftVal.val ) ) < ( alpha ) ) ))", "stateMachineHome.initToBackward");
fsm.Transition.create(stateMachineHome, stateMachineHome.goRight, stateMachineHome.goLeft, "(( ( LsLeftVal.val ) < ( LsRightVal.val ) ) && ( ( ( LsRightVal.val ) - ( LsLeftVal.val ) ) > ( alpha ) ))", "stateMachineHome.rightToLeft");
fsm.Transition.create(stateMachineHome, stateMachineHome.goRight, stateMachineHome.goStraight, "(( ( ( ( LsRightVal.val ) < ( valueMax ) ) && ( ( LsLeftVal.val ) < ( valueMax ) ) ) && ( ( ( LsLeftVal.val ) != ( zero ) ) && ( ( LsRightVal.val ) != ( zero ) ) ) ) && ( ( ( ( LsLeftVal.val ) - ( LsRightVal.val ) ) < ( valueMax ) ) || ( ( ( LsRightVal.val ) - ( LsLeftVal.val ) ) < ( alpha ) ) ))", "stateMachineHome.rightToStraight");
fsm.Transition.create(stateMachineHome, stateMachineHome.goRight, stateMachineHome.end, "(( ( LsRightVal.val ) == ( zero ) ) && ( ( LsLeftVal.val ) == ( zero ) ))", "stateMachineHome.rightToEnd");
fsm.Transition.create(stateMachineHome, stateMachineHome.goRight, stateMachineHome.backward, "(( ( ( LsLeftVal.val ) >= ( valueMax ) ) && ( ( LsRightVal.val ) >= ( valueMax ) ) ) && ( ( ( ( LsLeftVal.val ) - ( LsRightVal.val ) ) <= ( alpha ) ) || ( ( ( LsRightVal.val ) - ( LsLeftVal.val ) ) <= ( alpha ) ) ))", "stateMachineHome.rightToBackward");
fsm.Transition.create(stateMachineHome, stateMachineHome.goLeft, stateMachineHome.goStraight, "(( ( ( ( LsLeftVal.val ) != ( zero ) ) && ( ( LsRightVal.val ) != ( zero ) ) ) && ( ( ( LsRightVal.val ) < ( valueMax ) ) && ( ( LsLeftVal.val ) < ( valueMax ) ) ) ) && ( ( ( ( LsLeftVal.val ) - ( LsRightVal.val ) ) < ( alpha ) ) || ( ( ( LsRightVal.val ) - ( LsLeftVal.val ) ) < ( alpha ) ) ))", "stateMachineHome.leftToStraight");
fsm.Transition.create(stateMachineHome, stateMachineHome.goLeft, stateMachineHome.goRight, "(( ( LsRightVal.val ) < ( LsLeftVal.val ) ) && ( ( ( LsLeftVal.val ) - ( LsRightVal.val ) ) > ( alpha ) ))", "stateMachineHome.leftToRight");
fsm.Transition.create(stateMachineHome, stateMachineHome.goLeft, stateMachineHome.end, "(( ( LsRightVal.val ) == ( zero ) ) && ( ( LsLeftVal.val ) == ( zero ) ))", "stateMachineHome.leftToEnd");
fsm.Transition.create(stateMachineHome, stateMachineHome.goLeft, stateMachineHome.backward, "(( ( ( LsLeftVal.val ) >= ( valueMax ) ) && ( ( LsRightVal.val ) >= ( valueMax ) ) ) && ( ( ( ( LsLeftVal.val ) - ( LsRightVal.val ) ) <= ( alpha ) ) || ( ( ( LsRightVal.val ) - ( LsLeftVal.val ) ) <= ( alpha ) ) ))", "stateMachineHome.leftToBackward");
fsm.Transition.create(stateMachineHome, stateMachineHome.goStraight, stateMachineHome.goLeft, "(( ( LsLeftVal.val ) < ( LsRightVal.val ) ) && ( ( ( LsRightVal.val ) - ( LsLeftVal.val ) ) > ( alpha ) ))", "stateMachineHome.straightToLeft");
fsm.Transition.create(stateMachineHome, stateMachineHome.goStraight, stateMachineHome.goStraight, "(( ( ( ( LsRightVal.val ) < ( valueMax ) ) && ( ( LsLeftVal.val ) < ( valueMax ) ) ) && ( ( ( LsLeftVal.val ) != ( zero ) ) && ( ( LsRightVal.val ) != ( zero ) ) ) ) && ( ( ( ( LsLeftVal.val ) - ( LsRightVal.val ) ) < ( valueMax ) ) || ( ( ( LsRightVal.val ) - ( LsLeftVal.val ) ) < ( alpha ) ) ))", "stateMachineHome.straightToStraight");
fsm.Transition.create(stateMachineHome, stateMachineHome.goStraight, stateMachineHome.goRight, "(( ( LsRightVal.val ) < ( LsLeftVal.val ) ) && ( ( ( LsLeftVal.val ) - ( LsRightVal.val ) ) > ( alpha ) ))", "stateMachineHome.straightToRight");
fsm.Transition.create(stateMachineHome, stateMachineHome.goStraight, stateMachineHome.end, "(( ( LsRightVal.val ) == ( zero ) ) && ( ( LsLeftVal.val ) == ( zero ) ))", "stateMachineHome.straightToEnd");
fsm.Transition.create(stateMachineHome, stateMachineHome.goStraight, stateMachineHome.backward, "(( ( ( LsLeftVal.val ) >= ( valueMax ) ) && ( ( LsRightVal.val ) >= ( valueMax ) ) ) && ( ( ( ( LsLeftVal.val ) - ( LsRightVal.val ) ) <= ( alpha ) ) || ( ( ( LsRightVal.val ) - ( LsLeftVal.val ) ) <= ( alpha ) ) ))", "stateMachineHome.straightToBackward");
fsm.Transition.create(stateMachineHome, stateMachineHome.backward, stateMachineHome.goLeft, "(( ( LsLeftVal.val ) < ( LsRightVal.val ) ) && ( ( ( LsRightVal.val ) - ( LsLeftVal.val ) ) > ( alpha ) ))", "stateMachineHome.backwardToLeft");
fsm.Transition.create(stateMachineHome, stateMachineHome.backward, stateMachineHome.goStraight, "(( ( ( ( LsLeftVal.val ) != ( zero ) ) && ( ( LsRightVal.val ) != ( zero ) ) ) && ( ( ( LsRightVal.val ) < ( valueMax ) ) && ( ( LsLeftVal.val ) < ( valueMax ) ) ) ) && ( ( ( ( LsLeftVal.val ) - ( LsRightVal.val ) ) < ( alpha ) ) || ( ( ( LsRightVal.val ) - ( LsLeftVal.val ) ) < ( alpha ) ) ))", "stateMachineHome.backwardToStraight");
fsm.Transition.create(stateMachineHome, stateMachineHome.backward, stateMachineHome.goRight, "(( ( LsRightVal.val ) < ( LsLeftVal.val ) ) && ( ( ( LsLeftVal.val ) - ( LsRightVal.val ) ) > ( alpha ) ))", "stateMachineHome.backwardToRight");
fsm.Transition.create(stateMachineHome, stateMachineHome.backward, stateMachineHome.end, "(( ( LsRightVal.val ) == ( zero ) ) && ( ( LsLeftVal.val ) == ( zero ) ))", "stateMachineHome.backwardToEnd");
fsm.Transition.create(stateMachineHome, stateMachineHome.backward, stateMachineHome.backward, "(( ( ( LsLeftVal.val ) >= ( valueMax ) ) && ( ( LsRightVal.val ) >= ( valueMax ) ) ) && ( ( ( ( LsLeftVal.val ) - ( LsRightVal.val ) ) <= ( alpha ) ) || ( ( ( LsRightVal.val ) - ( LsLeftVal.val ) ) < ( alpha ) ) ))", "stateMachineHome.backwardToBackward");

var stateMachineHome.enterChan = Channel.new("enteringNode");
var stateMachineHome.enterChan.lobby = getSlot("lobby");
at(stateMachineHome.enteringNode?(var id)) stateMachineHome.enterChan << id.name;
var stateMachineHome.leaveChan = Channel.new("leavingNode");
var stateMachineHome.leaveChan.lobby = getSlot("lobby");
at(stateMachineHome.leavingNode?(var id)) stateMachineHome.leaveChan << id.name;
var stateMachineHome.transitingChan = Channel.new("transiting");
var stateMachineHome.transitingChan.lobby = getSlot("lobby");
at(stateMachineHome.transit?(var node, var trans)) stateMachineHome.transitingChan << trans.name;
var stateMachineHome.freezeChan = Channel.new("freezed");
var stateMachineHome.freezeChan.lobby = getSlot("lobby");
at(stateMachineHome.fsmFreezed?()) stateMachineHome.freezeChan << 1;

/* ====== Main.u ====== */
var path = "/Users/skchir/Desktop/These_Selma/SearchForLight/controllers/";
var Global.actuator = actuators.new();
var fsmEscape = Tag.new;
var fsmHome = Tag.new;
var active_fsmEscape = false;
var active_fsmHome = false;
actuator.forward(500);
var active_fsmEscape = false;
stateMachineHome.enter();
